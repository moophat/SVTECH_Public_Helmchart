{{- if and (include "freeradius.createTlsSecret" . ) .Values.tls.autoGenerator.certmanager.enabled }}
{{- if .Capabilities.APIVersions.Has "cert-manager.io/v1" }}
{{- $releaseNamespace := include "common.names.namespace" . }}
{{- $clusterDomain := .Values.clusterDomain }}
{{- $fullname := include "common.names.fullname" . }}
{{- $serviceName := include "common.names.fullname" . }}
{{- $altNames := list (printf "%s.%s.svc.%s" $fullname $releaseNamespace $clusterDomain) (printf "%s.%s.svc" $fullname $releaseNamespace) (printf "%s.%s" $fullname $releaseNamespace) $fullname }}
{{/*
{{- $altNames := list (printf "*.%s.%s.svc.%s" $serviceName $releaseNamespace $clusterDomain) (printf "%s.%s.svc" $serviceName $releaseNamespace) (printf "%s.%s" $serviceName $releaseNamespace) $fullname }}
*/}}
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: {{ include "common.names.fullname" . }}-tls
  namespace: {{ include "common.names.namespace" . | quote }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
  {{- if .Values.commonLabels }}
  {{- include "common.tplvalues.render" (dict "value" .Values.commonLabels "context" $) | nindent 4 }}
  {{- end }}
spec:
  secretName: {{ include "freeradius.tlsSecretName" . }}
  issuerRef:
    group: cert-manager.io
    kind: {{ .Values.tls.autoGenerator.certmanager.issuerKind }}
    name: {{ .Values.tls.autoGenerator.certmanager.issuerName }}
    #name: letsencrypt-prd
  privateKey:
    algorithm: ECDSA
    rotationPolicy: Always
    size: 256
  subject:
    organizationalUnits:
    - {{ .Release.Name | quote }}
  dnsNames:
  {{- with $altNames }}
    {{- toYaml . | nindent 4 }}
  {{- end }}
{{- end }}
{{- end }}
---