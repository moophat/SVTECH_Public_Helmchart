## @section Global parameters
## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass

## @param global.imageRegistry Global Docker image registry
## @param global.imagePullSecrets Global Docker registry secret names as an array
## @param global.storageClass Global StorageClass for Persistent Volume(s)
##
global:
  imageRegistry: ""
  ## E.g.
  ## imagePullSecrets:
  ##   - myRegistryKeySecretName
  ##
  imagePullSecrets: []
  storageClass: ""

init:
  image:
    repository: mysql
    tag: 8.2.0
## @section Common parameters

## @param kubeVersion Force target Kubernetes version (using Helm capabilities if not set)
##
kubeVersion: ""
## @param nameOverride String to partially override adminer.fullname
##
nameOverride: ""
## @param fullnameOverride String to fully override adminer.fullname
##
fullnameOverride: ""
## @param commonLabels Labels to add to all deployed objects
##
commonLabels: {}
## @param commonAnnotations Annotations to add to all deployed objects
##
commonAnnotations: {}
## @param clusterDomain Default Kubernetes cluster domain
##
clusterDomain: cluster.local
## @param extraDeploy Array of extra objects to deploy with the release
##
extraDeploy: []

## Enable diagnostic mode in the deployment
##
diagnosticMode:
  ## @param diagnosticMode.enabled Enable diagnostic mode (all probes will be disabled and the command will be overridden)
  ##
  enabled: false
  ## @param diagnosticMode.command Command to override all containers in the deployment
  ##
  command:
    - sleep
  ## @param diagnosticMode.args Args to override all containers in the deployment
  ##
  args:
    - infinity

## @section FreeRADIUS common parameters

## FreeRADIUS image
## ref: https://hub.docker.com/r/bitnami/mariadb/tags/
## @param image.registry FreeRADIUS image registry
## @param image.repository FreeRADIUS image repository
## @param image.tag FreeRADIUS image tag (immutable tags are recommended)
## @param image.pullPolicy FreeRADIUS image pull policy
## @param image.pullSecrets Specify docker-registry secret names as an array
## @param image.debug Specify if debug logs should be enabled
##
image:
  registry: docker.io
  repository: ptthanh1511/freeradius-server
  tag: "3.0.26-netdebug"
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: https://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: IfNotPresent
  ## Optionally specify an array of imagePullSecrets (secrets must be manually created in the namespace)
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ## Example:
  ## pullSecrets:
  ##   - myRegistryKeySecretName
  ##
  pullSecrets: []
  ## Set to true if you would like to see extra information on logs
  ## It turns BASH and/or NAMI debugging in the image
  ##
  debug: true
## @param architecture FreeRADIUS architecture (`standalone` or `replication`)
##
architecture: standalone

auth:
  ## @param auth.createAdminUser Create administrator user on boot
  ##
  createAdminUser: true
  ## @param auth.adminUser FreeRADIUS administrator user
  ##
  adminUser: user
  ## @param auth.adminPassword FreeRADIUS administrator password for the new user
  ##
  adminPassword: ""
  ## @param auth.existingSecret An already existing secret containing auth info
  ## e.g:
  ## existingSecret:
  ##   name: mySecret
  ##   keyMapping:
  ##     admin-password: myPasswordKey
  ##     management-password: myManagementPasswordKey
  ##
  existingSecret: ""
  ## @param auth.existingSecretPerPassword Override `existingSecret` and other secret values
  ## e.g:
  ## existingSecretPerPassword:
  ##   keyMapping:
  ##     adminPassword: FREERADIUS_ADMIN_PASSWORD
  ##     managementPassword: FREERADIUS_MANAGEMENT_PASSWORD
  ##     databasePassword: password
  ##   adminPassword:
  ##     name: freeradius-test2.credentials ## release-name
  ##   managementPassword:
  ##     name: freeradius-test2.credentials
  ##   databasePassword:
  ##     name: freeradius.pocwatt-freeradius-cluster.credentials
  ##
  existingSecretPerPassword: {}

## @param configuration FreeRADIUS Configuration. Auto-generated based on other parameters when not specified
## Specify content for keycloak.conf
## NOTE: This will override configuring FreeRADIUS based on environment variables (including those set by the chart)
## The radiusd.conf is auto-generated based on other parameters when this parameter is not specified
##
## Example:
## configuration: |-
##    foo: bar
##    baz:
##
configuration: ""
## @param configurationConfigMap ConfigMap with the FreeRADIUS configuration files (Note: Overrides `radiusdConfiguration`). The value is evaluated as a template.
##
configurationConfigMap: ""
## @param existingConfigmap Name of existing ConfigMap with FreeRADIUS configuration
## NOTE: When it's set the configuration parameter is ignored
##
existingConfigmap: ""
## @param extraStartupArgs Extra default startup args
##
extraStartupArgs: ""
## initdb scripts
## @param initdbScripts Specify dictionary of scripts to be run at first boot
## Alternatively, you can put your scripts under the files/docker-entrypoint-initdb.d directory
## e.g:
## initdbScripts:
##   my_init_script.sh: |
##      #!/bin/sh
##      echo "Do something."
##
initdbScripts: {}
## @param initdbScriptsConfigMap ConfigMap with the initdb scripts (Note: Overrides `initdbScripts`)
##
initdbScriptsConfigMap: ""
## @param primary.command Override default container command on FreeRADIUS container(s) (useful when using custom images)
##
command: []
  # - "/bin/sh"
  # - "-c"
  # - "tail -f /dev/null"
## @param primary.args Override default container args on FreeRADIUS container(s) (useful when using custom images)
##
args: []
  # - "-xX"
## @param primary.lifecycleHooks for the FreeRADIUS container(s) to automate configuration before or after startup
##
lifecycleHooks: {}
## @param primary.hostAliases Add deployment host aliases
## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
##
hostAliases: []
## @param primary.configuration [string] FreeRADIUS configuration to be injected as ConfigMap
## ref: https://mysql.com/kb/en/mysql/configuring-mysql-with-mycnf/#example-of-configuration-file
##

## @section FreeRADIUS Deployment parameters

## @param replicaCount Desired number of cluster nodes
##
replicaCount: 1
## @param updateStrategy.type updateStrategy for FreeRADIUS Master StatefulSet
## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
##
updateStrategy:
  type: RollingUpdate
## @param podLabels Extra labels for FreeRADIUS pods
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
##
podLabels: {}
## @param podAnnotations Annotations for FreeRADIUS pods
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
##
podAnnotations: {}
## @param podAffinityPreset Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`
## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
##
podAffinityPreset: ""
## @param podAntiAffinityPreset Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`
## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
##
podAntiAffinityPreset: soft
## Node affinity preset
## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
##
nodeAffinityPreset:
  ## @param nodeAffinityPreset.type Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`
  ##
  type: ""
  ## @param nodeAffinityPreset.key Node label key to match. Ignored if `affinity` is set.
  ## E.g.
  ## key: "kubernetes.io/e2e-az-name"
  ##
  key: ""
  ## @param nodeAffinityPreset.values Node label values to match. Ignored if `affinity` is set.
  ## E.g.
  ## values:
  ##   - e2e-az1
  ##   - e2e-az2
  ##
  values: []

## @param affinity Affinity for FreeRADIUS secondary pods assignment
## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
## Note: podAffinityPreset, podAntiAffinityPreset, and  nodeAffinityPreset will be ignored when it's set
##
affinity: {}
## @param nodeSelector Node labels for FreeRADIUS secondary pods assignment
## Ref: https://kubernetes.io/docs/user-guide/node-selection/
##
nodeSelector: {}
## @param tolerations Tolerations for FreeRADIUS secondary pods assignment
## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []
## @param topologySpreadConstraints Topology Spread Constraints for FreeRADIUS secondary pods assignment
## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
## E.g.
## topologySpreadConstraints:
##   - maxSkew: 1
##     topologyKey: topology.kubernetes.io/zone
##     whenUnsatisfiable: DoNotSchedule
##
topologySpreadConstraints:
  - maxSkew: 1
    topologyKey: kubernetes.io/hostname
    whenUnsatisfiable: DoNotSchedule
    labelSelector:
      matchLabels:
        app.kubernetes.io/component: freeradius
## @param priorityClassName Priority class for FreeRADIUS secondary pods assignment
## Ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
##
priorityClassName: ""
## @param schedulerName Name of the k8s scheduler (other than default)
## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
##
schedulerName: ""
## @param podManagementPolicy podManagementPolicy to manage scaling operation of FreeRADIUS secondary pods
## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#pod-management-policies
##
podManagementPolicy: ""


## Role Based Access
## Ref: https://kubernetes.io/docs/admin/authorization/rbac/
##
rbac:
  ## @param rbac.create Specify whether RBAC resources should be created and used
  ##
  create: false
## @param containerPorts.auth FreeRADIUS Auth container port
## @param containerPorts.acct FreeRADIUS Accounting container port
## @param containerPorts.status FreeRADIUS Status HTTP container port
##
containerPorts:
  auth: 1812
  acct: 1813
  coa: 3799
  radsec: 2083
  status: 18121
## FreeRADIUS secondary Pod security context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
## @param podSecurityContext.enabled Enable security context for FreeRADIUS secondary pods
## @param podSecurityContext.fsGroup Group ID for the mounted volumes' filesystem
##
podSecurityContext:
  enabled: true
  fsGroup: 101
  runAsUser: 101
## FreeRADIUS secondary container security context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
## @param containerSecurityContext.enabled FreeRADIUS secondary container securityContext
## @param containerSecurityContext.runAsUser User ID for the FreeRADIUS secondary container
## @param containerSecurityContext.runAsNonRoot Set Controller container's Security Context runAsNonRoot
##
containerSecurityContext:
  enabled: true
  capabilities:
    add:
      - SYS_PTRACE
      - NET_ADMIN
      - SYS_TIME
  runAsUser: 101
  runAsNonRoot: true
## FreeRADIUS secondary container's resource requests and limits
## ref: https://kubernetes.io/docs/user-guide/compute-resources/
## We usually recommend not to specify default resources and to leave this as a conscious
## choice for the user. This also increases chances charts run on environments with little
## resources, such as Minikube. If you do want to specify resources, uncomment the following
## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
## @param resources.limits The resources limits for FreeRADIUS secondary containers
## @param resources.requests The requested resources for FreeRADIUS secondary containers
##
resources:
  ## Example:
  ## limits:
  ##    cpu: 100m
  ##    memory: 256Mi
  limits: {}
  ## Examples:
  ## requests:
  ##    cpu: 100m
  ##    memory: 256Mi
  requests: {}
## Configure extra options for FreeRADIUS Secondary containers' liveness, readiness and startup probes
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)
## @param startupProbe.enabled Enable startupProbe
## @param startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
## @param startupProbe.periodSeconds Period seconds for startupProbe
## @param startupProbe.timeoutSeconds Timeout seconds for startupProbe
## @param startupProbe.failureThreshold Failure threshold for startupProbe
## @param startupProbe.successThreshold Success threshold for startupProbe
##
startupProbe:
  enabled: false
  initialDelaySeconds: 120
  periodSeconds: 15
  timeoutSeconds: 5
  failureThreshold: 10
  successThreshold: 1
## Configure extra options for liveness probe
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
## @param livenessProbe.enabled Enable livenessProbe
## @param livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
## @param livenessProbe.periodSeconds Period seconds for livenessProbe
## @param livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
## @param livenessProbe.failureThreshold Failure threshold for livenessProbe
## @param livenessProbe.successThreshold Success threshold for livenessProbe
##
livenessProbe:
  enabled: false
  initialDelaySeconds: 120
  periodSeconds: 60
  timeoutSeconds: 2
  failureThreshold: 3
  successThreshold: 1
## @param readinessProbe.enabled Enable readinessProbe
## @param readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
## @param readinessProbe.periodSeconds Period seconds for readinessProbe
## @param readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
## @param readinessProbe.failureThreshold Failure threshold for readinessProbe
## @param readinessProbe.successThreshold Success threshold for readinessProbe
##
readinessProbe:
  enabled: false
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 3
  successThreshold: 1
## @param customStartupProbe Override default startup probe for FreeRADIUS secondary containers
##
customStartupProbe: {}
## @param customLivenessProbe Override default liveness probe for FreeRADIUS secondary containers
##
customLivenessProbe: {}
## @param customReadinessProbe Override default readiness probe for FreeRADIUS secondary containers
##
customReadinessProbe: {}
## @param startupWaitOptions Override default builtin startup wait check options for FreeRADIUS secondary containers
## `bitnami/mariadb` Docker image has built-in startup check mechanism,
## which periodically checks if FreeRADIUS service has started up and stops it
## if all checks have failed after X tries. Use these to control these checks.
## ref: https://github.com/bitnami/bitnami-docker-mariadb/pull/240
## Example (with default options):
## startupWaitOptions:
##   retries: 300
##   waitTime: 2
##
startupWaitOptions: {}
## @param extraFlags FreeRADIUS secondary additional command line flags
## Can be used to specify command line flags, for example:
## E.g.
## extraFlags: "--max-connect-errors=1000 --max_connections=155"
##
extraFlags: ""
## @param extraEnvVars Extra environment variables to be set on FreeRADIUS secondary containers
## E.g.
## extraEnvVars:
##  - name: TZ
##    value: "Europe/Paris"
##
extraEnvVars: []
## @param extraEnvVarsCM Name of existing ConfigMap containing extra env vars for FreeRADIUS secondary containers
##
extraEnvVarsCM: ""
## @param extraEnvVarsSecret Name of existing Secret containing extra env vars for FreeRADIUS secondary containers
##
extraEnvVarsSecret: ""
## Enable persistence using Persistent Volume Claims
## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistence:
  ## @param persistence.enabled Enable persistence on FreeRADIUS secondary replicas using a `PersistentVolumeClaim`
  ##
  enabled: false
    ## @param persistence.existingClaim Name of an existing `PersistentVolumeClaim` for FreeRADIUS primary replicas
    ## NOTE: When it's set the rest of persistence parameters are ignored
    ##
  existingClaim: ""
  ## @param persistence.subPath Subdirectory of the volume to mount at
  ##
  subPath: ""
  ## @param persistence.storageClass FreeRADIUS secondary persistent volume storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  storageClass: ""
  ## @param persistence.annotations FreeRADIUS secondary persistent volume claim annotations
  ##
  annotations: {}
  ## @param persistence.accessModes FreeRADIUS secondary persistent volume access Modes
  ##
  accessModes:
    - ReadWriteOnce
  ## @param persistence.size FreeRADIUS secondary persistent volume size
  ##
  size: 8Gi
  ## @param persistence.selector Selector to match an existing Persistent Volume
  ## selector:
  ##   matchLabels:
  ##     app: my-app
  ##
  selector: {}
## @param extraVolumes Optionally specify extra list of additional volumes to the FreeRADIUS secondary pod(s)
##
extraVolumes:
  - name: logging
    emptyDir: {}
## @param extraVolumeMounts Optionally specify extra list of additional volumeMounts for the FreeRADIUS secondary container(s)
##
extraVolumeMounts:
  - mountPath: /var/log/freeradius
    name: logging

## @param initContainers Add additional init containers for the FreeRADIUS secondary pod(s)
##
initContainers: []
## @param sidecars Add additional sidecar containers for the FreeRADIUS secondary pod(s)
##
sidecars:
  - name: auth-log
    image: alpine:3.14
    args: [/bin/sh, -c, 'tail -n+1 -F /var/log/freeradius/linelog-auth']
    volumeMounts:
      - mountPath: /var/log/freeradius
        name: logging
        readOnly: true
  - name: acct-log
    image: alpine:3.14
    args: [/bin/sh, -c, 'tail -n+1 -F /var/log/freeradius/linelog-acct']
    volumeMounts:
      - mountPath: /var/log/freeradius
        name: logging
        readOnly: true

service:
  ## @param service.type FreeRADIUS Kubernetes service type
  ##
  type: LoadBalancer
  ## @param service.ports.auth FreeRADIUS Kubernetes service port
  ##
  ports:
    auth: 1812
    acct: 1813
    coa: 3799
    radsec: 2083
    status: 18121
  ## @param service.nodePorts.mysql FreeRADIUS Kubernetes service node port
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
  ##
  nodePorts:
    auth: ""
    acct: ""
    coa: ""
    radsec: ""
    status: ""
  ## @param service.clusterIP FreeRADIUS Kubernetes service clusterIP IP
  ##
  clusterIP: ""
  ## @param service.ipFamilyPolicy FreeRADIUS Kubernetes service ipFamilyPolicy policy
  ##
  ipFamilyPolicy: SingleStack
  ## @param service.loadBalancerIP FreeRADIUS loadBalancerIP if service type is `LoadBalancer`
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
  ##
  loadBalancerIP: ""
  ## @param service.externalTrafficPolicy Enable client source IP preservation
  ## ref https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
  ##
  externalTrafficPolicy: Cluster
  ## @param service.loadBalancerSourceRanges Address that are allowed when FreeRADIUS service is LoadBalancer
  ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
  ## E.g.
  ## loadBalancerSourceRanges:
  ##   - 10.10.10.0/24
  ##
  loadBalancerSourceRanges: []
  ## @param service.extraPorts Extra ports to expose (normally used with the `sidecar` value)
  ##
  extraPorts: []
  ## @param service.annotations Provide any additional annotations which may be required
  ##
  annotations: {}
  ## @param service.sessionAffinity Session Affinity for Kubernetes service, can be "None" or "ClientIP"
  ## If "ClientIP", consecutive client requests will be directed to the same Pod
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
  ##
  sessionAffinity: None
  ## @param service.sessionAffinityConfig Additional settings for the sessionAffinity
  ## sessionAffinityConfig:
  ##   clientIP:
  ##     timeoutSeconds: 300
  sessionAffinityConfig: {}

## @param revisionHistoryLimit Maximum number of revisions that will be maintained in the Deployment
##
revisionHistoryLimit: 3

## @section RBAC parameter
## Specifies whether a ServiceAccount should be created
##
serviceAccount:
  ## @param serviceAccount.create Enable the creation of a ServiceAccount for FreeRADIUS pods
  ##
  create: true
  ## @param serviceAccount.name Name of the created ServiceAccount
  ## If not set and create is true, a name is generated using the fullname template
  ##
  name: ""
  ## @param serviceAccount.automountServiceAccountToken Auto-mount the service account token in the pod
  ##
  automountServiceAccountToken: false

## Pod disruption budget configuration
##
podDisruptionBudget:
  ## @param podDisruptionBudget.create Specifies whether a Pod disruption budget should be created
  ##
  create: false
  ## @param podDisruptionBudget.minAvailable Minimum number / percentage of pods that should remain scheduled
  ##
  minAvailable: 1
  ## @param podDisruptionBudget.maxUnavailable Maximum number / percentage of pods that may be made unavailable
  ##
  maxUnavailable: ""

## MariaDB chart configuration
## ref: https://github.com/bitnami/charts/blob/master/bitnami/mariadb/values.yaml
## @param mariadb.enabled Switch to enable or disable the MariaDB helm chart
## @param mariadb.auth.username Name for a custom user to create
## @param mariadb.auth.password Password for the custom user to create
## @param mariadb.auth.database Name for a custom database to create
## @param mariadb.auth.existingSecret Name of existing secret to use for MariaDB credentials
## @param mariadb.architecture MariaDB architecture (`standalone` or `replication`)
##
mariadb:
  enabled: false
  replicaCount: 3
  auth:
    username: radius
    password: "juniper@123"
    database: radius
    existingSecret: ""
  architecture: standalone
## External Database configuration
## All of these values are only used when mariadb.enabled is set to false
## @param externalDatabase.host Database host
## @param externalDatabase.port Database port number
## @param externalDatabase.user Non-root username for FreeRADIUS
## @param externalDatabase.password Password for the non-root username for FreeRADIUS
## @param externalDatabase.database FreeRADIUS database name
## @param externalDatabase.existingSecret Name of an existing secret resource containing the database credentials
## @param externalDatabase.existingSecretPasswordKey Name of an existing secret key containing the database credentials
##
externalDatabase:
  host: "mariadb"
  port: 3306
  user: radius
  database: radius
  password: "juniper@123"
  existingSecret: ""
  existingSecretPasswordKey: ""

modsEnabled:
  sql:
    enabled: true
    dialect: mysql
    table:
      acct1: radacct
      acct2: radacct
      authcheck: radcheck
      authreply: radreply
      client: nas
      groupcheck: radgroupcheck
      groupreply: radgroupreply
      postauth: radpostauth
      usergroup: radusergroup
    tls:
      enabled: false
    existingTlsSecret: ""
  dynamicClients:
    enabled: true
  lineLog:
    enabled: true

sitesEnabled:
  coa:
    enabled: false
    listen: "*"
  status:
    enabled: false
    listen: 127.0.0.1
    secret: adminsecret
  tls:
    listen: "*"
    privateKeyPassword: adminsecret
  dynamicClients:
    enabled: true

tls:
  ## @param tls.enabled Enable TLS support for radsec traffic
  ##
  enabled: false
  ## @param tls.autoGenerated Generate automatically self-signed TLS certificates
  ##
  autoGenerated: true
  autoGenerator:
    certmanager:
      enabled: false
      issuerKind: ClusterIssuer
      issuerName: selfsigned-issuer
  ## @param tls.certificatesSecret Name of the secret that contains the certificates
  ##
  certificatesSecret: ""
  ## @param tls.certFilename Certificate filename
  ##
  certFilename: ""
  ## @param tls.certKeyFilename Certificate key filename
  ##
  certKeyFilename: ""
  ## @param tls.certCAFilename CA Certificate filename
  ##
  certCAFilename: ""

  secretName: ~
  existingSecret: ""

## Prometheus exporter configuration
##
metrics:
  ## @param metrics.enabled Start a side-car prometheus exporter
  ##
  enabled: false
  ## Bitnami FreeRADIUS Prometheus exporter image
  ## ref: 
  ## @param metrics.image.registry FreeRADIUS Prometheus exporter image registry
  ## @param metrics.image.repository FreeRADIUS Prometheus exporter image repository
  ## @param metrics.image.tag FreeRADIUS Prometheus exporter image tag (immutable tags are recommended)
  ## @param metrics.image.pullPolicy FreeRADIUS Prometheus exporter image pull policy
  ## @param metrics.image.pullSecrets FreeRADIUS Prometheus exporter image pull secrets
  ##
  image:
    registry: docker.io
    repository: 
    tag: 
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets (secrets must be manually created in the namespace)
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## Example:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []

  ## Prometheus Operator PrometheusRule configuration
  ##
  prometheusRules:
    ## @param metrics.prometheusRules.enabled if `true`, creates a Prometheus Operator PrometheusRule (also requires `metrics.enabled` to be `true`, and makes little sense without ServiceMonitor)
    ##
    enabled: false
    ## @param metrics.prometheusRules.additionalLabels [object] Additional labels to add to the PrometheusRule so it is picked up by the operator
    ## If using the [Helm Chart](https://github.com/helm/charts/tree/master/stable/prometheus-operator) this is the name of the Helm release and 'app: prometheus-operator'
    ##
    additionalLabels:
      app: prometheus-operator
      release: prometheus
    ## @param metrics.prometheusRules.rules PrometheusRule rules to configure
    ## e.g:
    ##  - alert: FreeRADIUS-Down
    ##    annotations:
    ##      message: 'FreeRADIUS instance {{ $labels.instance }} is down'
    ##      summary: FreeRADIUS instance is down
    ##    expr: absent(up{job="freeradius"} == 1)
    ##    labels:
    ##      severity: warning
    ##      service: freeradius
    ##    for: 5m
    ##
    rules: {}
